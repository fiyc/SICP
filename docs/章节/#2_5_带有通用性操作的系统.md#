## 2.5 带有通用型操作的系统
在前一节里, 我们看到了如何去设计一个系统, 使其中的数据对象可以以多于一种方式表示. 这里的关键思想就是通过通用型界面过程, 将描述数据操作的代码连接到几种不同表示上. 现在我们要使用数据导向技术构造起一个算术运算包, 将前面已经构造出的所有算术包都结合进去.  

下图展示了我们将要构造的系统的结构.  

![图2-23](https://github.com/fiyc/StaticResource/blob/master/SICP_P_2_23.png?raw=true)  

### 2.5.1 通用型算术运算
设计通用型算术运算的工作类似于设计通用型复数运算. 我们希望有一个通用型的加法过程`add`, 对于常规的数, 它的行为就像常规的基本加法`+`; 对于有理数, 它就像`add-rat`, 对于复数就像`add-complex`.  

通用型算术过程的定义如下:  

```lisp
(define (add x y) (apply-generic 'add x y))

(define (sub x y) (apply-generic 'sub x y))

(define (mul x y) (apply-generic 'mul x y))

(define (div x y) (apply-generic 'div x y))
```  

下面我们将从安装处理`常规数`的包开始, 对这种数采用的标志是符号`scheme-number`  
代码 [SICP/code/demos/install-scheme-number-package.scm](#)  

Scheme数值包的用户可以通过下面的过程, 创建带标p志的常规数:  
```lisp
(define (make-scheme-number n)
	((get 'make 'scheme-number) n))
```

下面是一个执行有理数算术的程序包.  
代码 [SICP/code/demos/install-rational-package.scm](#)  

同样的, 我们可以安装上另一个处理复数的类似程序包, 采用的标志是`complex`  
代码 [SICP/code/demos/install-complex-package.scm](#)  
#### 练习2.77

#### 练习2.78

#### 练习2.79

#### 练习2.80

### 2.5.2 不同类型数据的组合

#### 强制

#### 类型的层次结构

#### 层次结构的不足

#### 练习2.81

#### 练习2.82

#### 练习2.83

#### 练习2.84

#### 练习2.85

#### 练习2.86

### 2.5.3 实例: 符号代数

#### 多项式算是

#### 项表的表示

#### 练习2.87

#### 练习2.88

#### 练习2.89

#### 练习2.90

#### 练习2.91

#### 符号代数中类型的层次结构

#### 练习2.92

#### 扩展练习: 有理函数

#### 练习2.93

#### 练习2.94

#### 练习2.95

#### 练习2.96

#### 练习2.97



